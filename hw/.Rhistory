coin_toss = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)['tails']
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist ( replicate(5000, number_of_tails(40)), 20)
## Q1- 4pts
## Write a function that will simulate the number of tails in a series of coin tosses.
## The input to the function is the number of coin tosses
## The output should be a single number equivalent to the number of tails in the series
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)['tails']
}
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)['tails']
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist ( replicate(5000, number_of_tails(40)), 20)
View(coin_toss)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)['tails']
}
?replicate
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)))
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
num_tails = frequency(flips)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(type(number_of_tails()))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
print(info(number_of_tails()))
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(info(number_of_tails()))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print_info(number_of_tails())
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print_info(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(info(num_tails))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(type(num_tails))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(typeof(num_tails))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(class(num_tails))
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = frequency(flips)
print(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
coin = c('heads', 'tails')
sample(coin, 1)
sample(coin, 5)
sample(coin, 5, replace = T)
flips = sample(coin, 5, replace = T)
flips
frequency(flips)
table(flips)
table(flips)['heads']
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = table(flips)['tails']
return(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 2)
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 200)
#set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
#set.seed(Sys.time())
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = table(flips)['tails']
return(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 200)
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20)
?hist
hist(replicate(5000, number_of_tails(40)), 20,
main = "Distribution of Number of Tails",
xlab = "'Number of Tails",
ylab = "Numbe of Trials")
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20,
main = "Distribution of Number of Tails",
xlab = "Number of Tails",
ylab = "Numbe of Trials")
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20,
main = "Distribution of Number of Tails",
xlab = "Number of Tails",
ylab = "Numbe of Trials")
diff = (split(dna1, '') == split(dna2, ''))
## Q3- 4pts
## Values and objects have different data types in R
## You are given two DNA sequences of equal length
## find out how many bases are different between the two
dna1 = "TTAGCCTAAGCTA"
dna2 = "TTAGCCGATGCTA"
diff = (split(dna1, '') == split(dna2, ''))
diff = (split(dna1, ''), split(dna2, ''))
diff = (split(dna1, ''))
diff = (strsplit(dna1, ''))
diff = strsplit(dna1, '')
diff = strsplit(dna1, '')
diff = unlist(strsplit(dna1, ''))
dna1_split = unlist(strsplit(dna1, ''))
dna2_split = unlist(strsplit(dna2, ''))
diff = dna1_split == dna2_split
num_diff = table(diff)[F]
print(diff)
num_diff = sum(dna1_split != dna2_split)
print(num_diff)
print("There are", num_diff, "bases that differ.")
print(paste("There are", num_diff, "bases that differ.")
print(paste("There are", num_diff, "bases that differ."))
print("Number of different bases:", num_diff)
print(paste("Number of different bases:", num_diff)
print(paste("Number of different bases:", num_diff))
print(cat("Number of different bases:", num_diff))
print(cat("Number of different bases:", num_diff[1]))
print(cat("Number of different bases:", print(num_diff)))
num_bases_diff = sum(dna1_split != dna2_split)
print(num_bases_diff)
## Q1- 4pts
## Write a function that will simulate the number of tails in a series of coin tosses.
## The input to the function is the number of coin tosses
## The output should be a single number equivalent to the number of tails in the series
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = table(flips)['tails']
return(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20,
main = "Distribution of Number of Tails",
xlab = "Number of Tails",
ylab = "Numbe of Trials")
## Q3- 4pts
## Values and objects have different data types in R
## You are given two DNA sequences of equal length
## find out how many bases are different between the two
dna1 = "TTAGCCTAAGCTA"
dna2 = "TTAGCCGATGCTA"
dna1_split = unlist(strsplit(dna1, ''))
dna2_split = unlist(strsplit(dna2, ''))
num_bases_diff = sum(dna1_split != dna2_split)
print(num_bases_diff)
## Q1- 4pts
## Write a function that will simulate the number of tails in a series of coin tosses.
## The input to the function is the number of coin tosses
## The output should be a single number equivalent to the number of tails in the series
number_of_tails = function(num_tosses) {
coin = c('heads', 'tails')
flips = sample(coin, size = num_tosses, replace = TRUE)
num_tails = table(flips)['tails']
return(num_tails)
}
## Q2 - 4pts
## Using the function you wrote in Q2, generate 5000 experiments each with 40 coin tosses
## Plot the distribution of the outputs as a histogram
hist(replicate(5000, number_of_tails(40)), 20,
main = "Distribution of Number of Tails",
xlab = "Number of Tails",
ylab = "Numbe of Trials")
## Q3- 4pts
## Values and objects have different data types in R
## You are given two DNA sequences of equal length
## find out how many bases are different between the two
dna1 = "TTAGCCTAAGCTA"
dna2 = "TTAGCCGATGCTA"
dna1_split = unlist(strsplit(dna1, ''))
dna2_split = unlist(strsplit(dna2, ''))
num_bases_diff = sum(dna1_split != dna2_split)
print(num_bases_diff)
renv::deactivate()
install.packages('renv')
renv::deactivate()
setwe()
setwd
setwd("~/git/339n/hw")
renv::init()
get_gc_ratio = function(s) {
split_s = unlist(strsplit(s, ""))
gc_count = sum(split_s == "G" | split_s == "C")
return(gc_count/length(split_s))
}
print(get_gc_ratio("ACCTGCA")) # 0.571
## Q2 - 4pt
## Every amino acid in a protein is encoded by three nucleotides.
## Execute the following two lines to get a list of all codons and corresponding amino acids
codons = c('UUU','UUC','UUA','UUG','UCU','UCC','UCA','UCG','UAU','UAC','UAA','UAG','UGU','UGC','UGA','UGG','CUU','CUC','CUA','CUG','CCU','CCC','CCA','CCG','CAU','CAC','CAA','CAG','CGU','CGC','CGA','CGG','AUU','AUC','AUA','AUG','ACU','ACC','ACA','ACG','AAU','AAC','AAA','AAG','AGU','AGC','AGA','AGG','GUU','GUC','GUA','GUG','GCU','GCC','GCA','GCG','GAU','GAC','GAA','GAG','GGU','GGC','GGA','GGG')
amino_acids = c('F','F','L','L','S','S','S','S','Y','Y','*','*','C','C','*','W','L','L','L','L','P','P','P','P','H','H','Q','Q','R','R','R','R','I','I','I','M','T','T','T','T','N','N','K','K','S','S','R','R','V','V','V','V','A','A','A','A','D','D','E','E','G','G','G','G' )
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, nchar(s), 3)) {
codon = substr(s, i, i+2)
amino_acid = amino_acids[codons == codon]
if (amino_acid == '*') {break}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCUUAGUCU")) # MFS (stop codon UAG in middle)
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
library(dslabs)
## This package has a number of interesting datasets
## We can load an example for simple plotting
data(gapminder)
## We can explore some of the features in this dataset with basic plots
?gapminder
## We can look at the first few entries of this dataset with "head"
head ( gapminder)
str (gapminder)
## Given this data frame let's extract the data from 2015 into a new data frame
gapminder_2015 = gapminder[gapminder$year == 2015 ,  ]
### plot the life expectancy (x axis) and infant mortality (y axis) using the data from 2015(2 pts).
### make a histogram of distribution of Fertility using the data from 2015 (2pts).
plot(gapminder_2015$life_expectancy, gapminder_2015$infant_mortality)
### plot the life expectancy (x axis) and infant mortality (y axis) using the data from 2015(2 pts).
### make a histogram of distribution of Fertility using the data from 2015 (2pts).
plot(gapminder_2015$life_expectancy,
gapminder_2015$infant_mortality,
title("Infant Martality vs Life Expectancy in 2015"),
ylab = "Infant Mortality",
xlab = "Life Expectancy")
### plot the life expectancy (x axis) and infant mortality (y axis) using the data from 2015(2 pts).
### make a histogram of distribution of Fertility using the data from 2015 (2pts).
plot(gapminder_2015$life_expectancy,
gapminder_2015$infant_mortality,
title("Infant Mortality vs Life Expectancy in 2015"),
ylab = "Infant Mortality",
xlab = "Life Expectancy")
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"))
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"))
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"))
plot.new()
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"))
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 20)
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 10)
plot.new()
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 10)
plot.new()
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 5)
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 10)
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 20)
plot.new()
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 20)
plot.new()
hist(gapminder_2015$fertility,
title("Fertility Rates in 2015"),
breaks = 10)
hist(gapminder_2015$fertility,
main = "Fertility Rates in 2015",
xlab = "Fertility Rate"
breaks = 10)
plot.new()
hist(gapminder_2015$fertility,
main = "Fertility Rates in 2015",
xlab = "Fertility Rate",
breaks = 10)
### plot the life expectancy (x axis) and infant mortality (y axis) using the data from 2015(2 pts).
### make a histogram of distribution of Fertility using the data from 2015 (2pts).
plot(gapminder_2015$life_expectancy,
gapminder_2015$infant_mortality,
main = "Infant Mortality vs Life Expectancy in 2015",
ylab = "Infant Mortality",
xlab = "Life Expectancy")
#plot.new()
hist(gapminder_2015$fertility,
main = "Fertility Rates in 2015",
xlab = "Fertility Rate",
breaks = 10)
### plot the life expectancy (x axis) and infant mortality (y axis) using the data from 2015(2 pts).
### make a histogram of distribution of Fertility using the data from 2015 (2pts).
plot(gapminder_2015$life_expectancy,
gapminder_2015$infant_mortality,
main = "Infant Mortality vs Life Expectancy in 2015",
ylab = "Infant Mortality",
xlab = "Life Expectancy")
hist(gapminder_2015$fertility,
main = "Fertility Rates in 2015",
xlab = "Fertility Rate",
breaks = 10)
