demo()
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
print(get_gc_ratio("ACCTGCA")) # 0.5714286
get_gc_ratio = function(s) {
split_s = unlist(strsplit(s, ""))
gc_count = sum(split_s == "G" | split_s == "C")
return(gc_count/length(split_s))
}
print(get_gc_ratio("ACCTGCA")) # 0.5714286
## Q2 - 4pt
## Every amino acid in a protein is encoded by three nucleotides.
## Execute the following two lines to get a list of all codons and corresponding amino acids
codons = c('UUU','UUC','UUA','UUG','UCU','UCC','UCA','UCG','UAU','UAC','UAA','UAG','UGU','UGC','UGA','UGG','CUU','CUC','CUA','CUG','CCU','CCC','CCA','CCG','CAU','CAC','CAA','CAG','CGU','CGC','CGA','CGG','AUU','AUC','AUA','AUG','ACU','ACC','ACA','ACG','AAU','AAC','AAA','AAG','AGU','AGC','AGA','AGG','GUU','GUC','GUA','GUG','GCU','GCC','GCA','GCG','GAU','GAC','GAA','GAG','GGU','GGC','GGA','GGG')
amino_acids = c('F','F','L','L','S','S','S','S','Y','Y','*','*','C','C','*','W','L','L','L','L','P','P','P','P','H','H','Q','Q','R','R','R','R','I','I','I','M','T','T','T','T','N','N','K','K','S','S','R','R','V','V','V','V','A','A','A','A','D','D','E','E','G','G','G','G' )
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
for i in 1:(length(s)/3) {
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
for (i in 1:(length(s)/3)) {
codon = s[(3*i-2):(3*i)]
amino_acid = amino_acids[codons == codons]
if (amino_acid == "*") {
break
}
protein_seq = c(protein_seq, amino_acid)
}
return(protein_seq)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
split_s = unlist(strsplit(s, ""))
codon_list = split_s
protein = ""
for (i in seq(1, length(codon_list), 3)) {
codon = paste(codon_list[i], codon_list[i+1], codon_list[i+2], sep="")
protein = paste(protein, amino_acids[which(codons == codon)], sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon = s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (length(amino_acid) == 0) {
break
}
protein = paste(protein, amino_acid, sep="")
}
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(s[i:(i+2)])
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(i)
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(i+2)
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(s[i:(i+2)])
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(substr(s, i, i+2)))
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(substr(s, i, i+2))
codon == s[i:(i+2)]
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(substr(s, i, i+2))
codon == substr(s, i, i+2)
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon = substr(s, i, i+2)
print(codon)
amino_acid = amino_acids[codons == codon]
if (amino_acid == "*") {
break
}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFL
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
codon = substr(s, i, i+2)
print(codon)
amino_acid = amino_acids[codons == codon]
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFS
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, length(s), 3)) {
print(i)
codon = substr(s, i, i+2)
print(codon)
amino_acid = amino_acids[codons == codon]
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFS
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, nchar(s), 3)) {
print(i)
codon = substr(s, i, i+2)
print(codon)
amino_acid = amino_acids[codons == codon]
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFS
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, nchar(s), 3)) {
codon = substr(s, i, i+2)
amino_acid = amino_acids[codons == codon]
if (amino_acid == '*') {break}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCU")) # MFS
print(translate_codons("AUGUUUUAGUCU")) # MFS
print(translate_codons("AUGUUUUCUUAGUCU")) # MFS
print(translate_codons("AUGUUUUCUUAGUCU")) # MFS (stop codon UAG in middle)
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
library(dslabs)
library(dslabs)
library(dslabs)
print(installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")])
x <- installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")]
get_gc_ratio = function(s) {
split_s = unlist(strsplit(s, ""))
gc_count = sum(split_s == "G" | split_s == "C")
return(gc_count/length(split_s))
}
print(get_gc_ratio("ACCTGCA")) # 0.571
## Q2 - 4pt
## Every amino acid in a protein is encoded by three nucleotides.
## Execute the following two lines to get a list of all codons and corresponding amino acids
codons = c('UUU','UUC','UUA','UUG','UCU','UCC','UCA','UCG','UAU','UAC','UAA','UAG','UGU','UGC','UGA','UGG','CUU','CUC','CUA','CUG','CCU','CCC','CCA','CCG','CAU','CAC','CAA','CAG','CGU','CGC','CGA','CGG','AUU','AUC','AUA','AUG','ACU','ACC','ACA','ACG','AAU','AAC','AAA','AAG','AGU','AGC','AGA','AGG','GUU','GUC','GUA','GUG','GCU','GCC','GCA','GCG','GAU','GAC','GAA','GAG','GGU','GGC','GGA','GGG')
amino_acids = c('F','F','L','L','S','S','S','S','Y','Y','*','*','C','C','*','W','L','L','L','L','P','P','P','P','H','H','Q','Q','R','R','R','R','I','I','I','M','T','T','T','T','N','N','K','K','S','S','R','R','V','V','V','V','A','A','A','A','D','D','E','E','G','G','G','G' )
## Write a function that will take a coding region sequence as input. You can assume the sequence is starting with AUG and is a multiple of three nucleotides.
## The output should be the corresponding protein sequence.
translate_codons = function(s) {
protein = ""
for (i in seq(1, nchar(s), 3)) {
codon = substr(s, i, i+2)
amino_acid = amino_acids[codons == codon]
if (amino_acid == '*') {break}
protein = paste(protein, amino_acid, sep="")
}
return(protein)
}
print(translate_codons("AUGUUUUCUUAGUCU")) # MFS (stop codon UAG in middle)
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
library(dslabs)
x <- installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")]
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
library(dslabs)
x <- installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")]
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs", verbose = T)
library(dslabs)
x <- installed.packages(); x[ is.na(x[,"Priority"]), c("Package", "Version")]
library(ggplot2)
library('ggplot2')
install.packages('ggplot2_')
library('ggplot2_')
library(withr)
renv::init()
renv::init()
## Q3 - 4pt
## R has powerful plotting options available.
## You may have already used ggplot package before
## even the base R language has many simple plotting functions
## Let's first install the dslabs package
install.packages("dslabs")
library(dslabs)
renv
renv::init
setwd(~/git/339n/hw)
setwd(~git/339n/hw)
setwd("~/git/339n")
setwd("~/git/339n/hw")
needleman_wunsch_pairwise()
while(i > 1 | j > 1){
if(i > 1 & j > 1 & score_matrix[i,j] == score_matrix[i-1,j-1] + (ifelse(substr(seq1,i-1,i-1) == substr(seq2,j-1,j-1), match_score, mismatch_score))){
align1 <- paste0(substr(seq1,i-1,i-1), align1)
align2 <- paste0(substr(seq2,j-1,j-1), align2)
i <- i-1
j <- j-1
} else if(i > 1 & score_matrix[i,j] == score_matrix[i-1,j] - gap_open){
align1 <- paste0(substr(seq1,i-1,i-1), align1)
align2 <- paste0("-", align2)
i <- i-1
} else {
align1 <- paste0("-", align1)
align2 <- paste0(substr(seq2,j-1,j-1), align2)
j <- j-1
}
}
global_align("ATTAGC","ATTCAGG")
global_align = function(seq1, seq2, match_score = 3, mismatch_score = -10, gap_open = -3) {
score_matrix = matrix(-Inf, nrow = nchar(seq1) + 1, ncol = nchar(seq2) + 1))
global_align = function(seq1, seq2, match_score = 3, mismatch_score = -10, gap_open = -3) {
score_matrix = matrix(-Inf, nrow = nchar(seq1) + 1, ncol = nchar(seq2) + 1)
print(score_matrix)
}
global_align("ATTAGC","ATTCAGG")
