setwd("~/git/339n/hw")
renv::autoload()
install.packages('renv')
renv::autoload()
library(HMM)
renv::install("HMM")
library(HMM)
?initHMM
?forward
?viterbi
## For this homework, use the dataset with strict quality controls.
##Data Cleaning: Remove all sequences that contain non-standard amino acids. Make sure to carefully check all columns in the data file.
data = read.csv(hw3_dataset.csv)
## For this homework, use the dataset with strict quality controls.
##Data Cleaning: Remove all sequences that contain non-standard amino acids. Make sure to carefully check all columns in the data file.
data = read.csv('hw3_dataset.csv')
print(dim(data)
print(data.columns)
print(data.columns)
print(data)
print(str(data))
View(data)
symbols = c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y")
data_cleaned = data[!grepl("[^ACDEFGHIKLMNPQRSTVWY]", data$seq),]
data_cleaned
View(data_cleaned)
data_cleaned = data[!grepl(symbols, data$seq),]
## For this homework, use the dataset with strict quality controls.
##Data Cleaning: Remove all sequences that contain non-standard amino acids. Make sure to carefully check all columns in the data file.
df = read.csv('hw3_dataset.csv')
symbols = c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y")
df_cleaned = df[df$seq %in% symbols]
df_cleaned
df
df_cleaned
View(df)
View(df_cleaned)
df_cleaned = df[all(df$seq %in% symbols),]
df_cleaned
View(df_cleaned)
df_cleaned = df[which(df$sst3 %in% c("C", "E", "H") & all(df$seq %in% symbols)),]
View(df_cleaned)
?all
df_cleaned = df[all(split(df%seq)) %in% symbols,]
df_cleaned = df[all(split(df%seq)) %in symbols,]
df_cleaned = df[all(split(df[seq])) %in% symbols,]
df_cleaned = df[all(df[seq]) %in% symbols,]
df_cleaned = df[all(df[seq] %in% symbols)]
df_cleaned = df[grep(paste(symbols, collapse = "|"), df$seq),]
df_cleaned = df[!grep(paste(symbols, collapse = "|"), df$seq),]
df = df[df$sst3 %in% c("C", "E", "H"),]
## For this homework, use the dataset with strict quality controls.
##Data Cleaning: Remove all sequences that contain non-standard amino acids. Make sure to carefully check all columns in the data file.
df = read.csv('hw3_dataset.csv')
df_cleaned = df[which(df$sst3 %in% c("C", "E", "H") & all(df$seq %in% symbols)),]
df_cleaned = df[which(df$sst3 %in% c("C", "E", "H") & all(df$seq %in% symbols)),]
df_cleaned = df[which(all(df$seq %in% symbols)),]
df_cleaned = df[which(all(df$seq %in% symbols))]
df_cleaned = df[which(all(df$seq %in% symbols)),]
symbols_list = paste(symbols, collapse = "")
df_cleaned = df[grepl(paste0("^[" , symbols_list, "]*$"), df$seq),]
## Print the number of rows and columns remaining after cleaning.
print(dim(df_cleaned))
View(df_cleaned)
View(df)
?dim
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1]))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1]), \n)
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1]), '\n')
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], \n))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], '\n'))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2], sep = "\n"))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2]))
print(paste("Columns:", dim(df_cleaned)[2]
print(paste("Columns:", dim(df_cleaned)[2]))
print(paste("Columns:", dim(df_cleaned)[2]))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1]))
print(paste("Columns:", dim(df_cleaned)[2]))
,
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2], sep = ""))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2], sep = "\n"))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2], sep = "/n"))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2]))
