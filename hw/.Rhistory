setwd("~/git/339n/hw")
renv::autoload()
renv::status()
?renv::status()
renv::snapshot()
renv::status()
library(HMM)
## For this homework, use the dataset with strict quality controls.
##Data Cleaning: Remove all sequences that contain non-standard amino acids. Make sure to carefully check all columns in the data file.
df = read.csv('hw3_dataset.csv')
symbols = c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y")
symbols_list = paste(symbols, collapse = "")
df_cleaned = df[grepl(paste0("^[" , symbols_list, "]*$"), df$seq),]
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", dim(df_cleaned)[1], "Columns:", dim(df_cleaned)[2]))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", nrow(df_cleaned), "Columns:", dim(df_cleaned)[2]))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", nrow(df_cleaned), "Columns:", ncol(df_cleaned))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", nrow(df_cleaned), "Columns:", ncol(df_cleaned)))
## Print the number of rows and columns remaining after cleaning.
print(paste("Rows:", nrow(df_cleaned), "Columns:", ncol(df_cleaned)))
sample = sample(c(TRUE, FALSE), nrow(df_cleaned), replace = TRUE, prob = c(0.1, 0.9))
train = df_cleaned[sample,]
test = df_cleaned[!sample,]
View(test)
View(test)
train = df_cleaned[!sample,]
test = df_cleaned[sample,]
View(test)
View(train)
?set.seed
set.seed(3)
sample = sample(c(TRUE, FALSE), nrow(df_cleaned), replace = TRUE, prob = c(0.1, 0.9))
train = df_cleaned[!sample,]
test = df_cleaned[sample,]
View(test)
?set.seed
set.seed(3)
sample = sample(c(TRUE, FALSE), nrow(df_cleaned), replace = TRUE, prob = c(0.1, 0.9))
train = df_cleaned[!sample,]
test = df_cleaned[sample,]
View(test)
?initHMM
calculate_hmm_params(train)
# Function to calculate the initial, emission, and transition probabilities
calculate_hmm_params = function(train) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(train$sst3)
initial_probs = initial_state_counts / sum(initial_state_counts)
# Calculate the emission probabilities
for (i in 1:length(states)) {
state = states[i]
state_seqs = train[train$sst3 == state, "seq"]
state_seq = paste(state_seqs, collapse = "")
state_seq_counts = table(strsplit(state_seq, "")[[1]])
emission_probs[i, ] = (state_seq_counts + 1) / sum(state_seq_counts + 1)
}
# Calculate the transition probabilities
for (i in 1:length(states)) {
state = states[i]
state_seqs = train[train$sst3 == state, "seq"]
state_seq = paste(state_seqs, collapse = "")
state_seq = paste0(" ", state_seq)
state_seq = paste0(state_seq, " ")
state_seq = strsplit(state_seq, "")[[1]]
state_seq = state_seq[-length(state_seq)]
state_seq = state_seq[-1]
state_seq_counts = table(state_seq)
transition_probs[i, ] = (state_seq_counts + 1) / sum(state_seq_counts + 1)
}
# Return the calculated probabilities
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
calculate_hmm_params(train)
##You will use the following symbols and states:
symbols = c("A", "C", "D", "E", "F", "G", "H", "I", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "Y")
states = c("C", "E", "H")
calculate_hmm_params(train)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(train$sst3)
initial_probs = initial_state_counts / sum(initial_state_counts)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(train$sst3)
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
View(calculate_hmm_params)
# Calculate the initial probabilities
initial_state_counts = table(apply(train$sst3, substr, 1, 1))
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(apply(train$sst3, substr, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
?apply
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(apply(train, 1, function(x) x["sst3"]))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(apply(train, c(, 1), substr(x, 1, 1)))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(apply(train, c(, 1), substr(1, 1)))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(apply(train, c(, 1), substr(1, 1, 1)))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = rep(0, length(states))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
str(initial_probs)
str(emission_probs)
str(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
?rep
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = c(rep(0, length(states)))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states))
str(initial_probs)
str(emission_probs)
str(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
?matrix
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = c(rep(0, length(states)))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
str(initial_probs)
str(emission_probs)
str(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = c(rep(0, length(states)))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
print(initial_probs)
}
get_hmm_params(train, symbols = symbols, states = states)
emission_probs['A']
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = c(rep(0, length(states)))
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
get_hmm_params(train, symbols = symbols, states = states)
x = get_hmm_params(train, symbols = symbols, states = states)
x$initial_probs$C
x$initial_probs['C']
x$emission_probs['C', 'A']
x$initial_probs['A']
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
initial_probs = initial_state_counts / sum(initial_state_counts)
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
x$initial_probs['A']
x$initial_probs['C']
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
x$initial_probs['C']
x$initial_probs['E']
x$initial_probs['H']
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
print(initial_probs)
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
x$initial_probs
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (state in states) {
state_seqs = train[train$sst3 == state, "seq"]
state_seq = paste(state_seqs, collapse = "")
state_seq_counts = table(strsplit(state_seq, "")[[1]])
for (symbol in symbols) {
if (symbol %in% names(state_seq_counts)) {
emission_probs[state, symbol] = state_seq_counts[symbol] / sum(state_seq_counts)
}
}
}
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
print(emission_probs)
print(transition_probs)
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1))
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (state in states) {
state_seqs = train[train$sst3 == state, "seq"]
state_seq = paste(state_seqs, collapse = "")
state_seq_counts = table(strsplit(state_seq, "")[[1]])
for (symbol in symbols) {
if (symbol %in% names(state_seq_counts)) {
emission_probs[state, symbol] = state_seq_counts[symbol] / sum(state_seq_counts)
}
}
}
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1)) # get first char of sst3
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (i in 1:nrow(train)) {
seq = strsplit(as.character(train$seq[i]), "")[[1]]
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 1:length(seq)) {
emission_probs[sst3[j], seq[j]] = emission_probs[sst3[j], seq[j]] + 1
}
}
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1)) # get first char of sst3
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (i in 1:nrow(train)) {
seq = strsplit(as.character(train$seq[i]), "")[[1]]
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 1:length(seq)) {
emission_probs[sst3[j], seq[j]] = emission_probs[sst3[j], seq[j]] + 1
}
}
emission_probs = emission_probs / rowSums(emission_probs)
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
?rowsum
?rowSums
rowSums(x%emission_probs)
rowSums(x$emission_probs)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1)) # get first char of sst3
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (i in 1:nrow(train)) { # go over each row and split the seq and sst3 strings
seq = strsplit(as.character(train$seq[i]), "")[[1]]
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 1:length(seq)) { # go over each character in the seq and sst3 strings and add to the emission_probs matrix
emission_probs[sst3[j], seq[j]] = emission_probs[sst3[j], seq[j]] + 1
}
}
emission_probs = emission_probs / rowSums(emission_probs) # convert total counts to probabilities
# Calculate the transition probabilities
for (i in 1:nrow(train)) { # go over each row and split the sst3 string
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 2:length(sst3)) { # go over each character in the sst3 string and add to the transition_probs matrix
transition_probs[sst3[j - 1], sst3[j]] = transition_probs[sst3[j - 1], sst3[j]] + 1
}
}
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
# Function to calculate the initial, emission, and transition probabilities
get_hmm_params = function(train, symbols, states) {
# Initialize the initial, emission, and transition probabilities
initial_probs = list(C = 0, E = 0, H = 0)
emission_probs = matrix(0, nrow = length(states), ncol = length(symbols), dimnames = list(states, symbols))
transition_probs = matrix(0, nrow = length(states), ncol = length(states), dimnames = list(states, states))
# Calculate the initial probabilities
initial_state_counts = table(substr(train$sst3, 1, 1)) # get first char of sst3
for (state in states) {
if (state %in% names(initial_state_counts)) {
initial_probs[state] = initial_state_counts[state] / nrow(train)
}
}
# Calculate the emission probabilities
for (i in 1:nrow(train)) { # go over each row and split the seq and sst3 strings
seq = strsplit(as.character(train$seq[i]), "")[[1]]
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 1:length(seq)) { # go over each character in the seq and sst3 strings and add to the emission_probs matrix
emission_probs[sst3[j], seq[j]] = emission_probs[sst3[j], seq[j]] + 1
}
}
emission_probs = emission_probs / rowSums(emission_probs) # convert total counts to probabilities
# Calculate the transition probabilities
for (i in 1:nrow(train)) { # go over each row and split the sst3 string
sst3 = strsplit(as.character(train$sst3[i]), "")[[1]]
for (j in 2:length(sst3)) { # go over each character in the sst3 string and add to the transition_probs matrix
transition_probs[sst3[j - 1], sst3[j]] = transition_probs[sst3[j - 1], sst3[j]] + 1
}
}
transition_probs = transition_probs / rowSums(transition_probs) # convert total counts to probabilities
return(list(initial_probs = initial_probs, emission_probs = emission_probs, transition_probs = transition_probs))
}
x = get_hmm_params(train, symbols = symbols, states = states)
print(x)
print(sumRows(x$transition_probs))
sumRows(x$transition_probs)
?sumRows
rowSums(x$transition_probs)
rowSums(x$emission_probs)
hmm_params = get_hmm_params(train, symbols = symbols, states = states)
print(hhm_params)
hmm_params = get_hmm_params(train, symbols = symbols, states = states)
print(hmm_params)
