}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), " D"))
}
# Possible directions: diagonal, left, up
diag = ((score_matrix[i-1, j-1]-10 == current) && substr(seq1, i, i) != substr(seq2, j, j)) | ((score_matrix[i-1, j-1]+3 == current) && substr(seq1, i, i) == substr(seq2, j, j))
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), " D"))
}
# Possible directions: diagonal, left, up
diag = ((score_matrix[i-1, j-1]-10 == current) && substr(seq1, i, i) != substr(seq2, j, j)) | ((score_matrix[i-1, j-1]+3 == current) && substr(seq1, i, i) == substr(seq2, j, j))
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), " D"))
}
# Possible directions: diagonal, left, up
diag = ((score_matrix[i-1, j-1]-10 == current) && substr(seq1, i, i) != substr(seq2, j, j)) | ((score_matrix[i-1, j-1]+3 == current) && substr(seq1, i, i) == substr(seq2, j, j))
diag = (substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] + 3) ||
(substr(seq1, i-1, i-1) != substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] - 10)
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), " D"))
}
# Possible directions: diagonal, left, up
diag = (substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] + 3) ||
(substr(seq1, i-1, i-1) != substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] - 10)
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
global_align = function(seq1, seq2, match_score = 3, mismatch_score = -10, gap_open = -8) {
m = nchar(seq1)
n = nchar(seq2)
score_matrix = matrix(0, nrow = m+1, ncol = n+1)
# fill out the matrix
for (i in 1:(m+1)) {
for (j in 1:(n+1)) {
if (i == 1) {
score_matrix[i,j] = gap_open * (j-1)
} else if (j == 1) {
score_matrix[i, j] = gap_open * (i-1)
} else {
match = score_matrix[i-1, j-1] + ifelse(substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1), match_score, mismatch_score)
gap_right = score_matrix[i, j-1] + gap_open
gap_down = score_matrix[i-1, j] + gap_open
score_matrix[i, j] = max(match, gap_right, gap_down)
}
}
}
print(score_matrix)
# trace the matrix back
directions = traceback_matrix(score_matrix, m+1, n+1, seq1, seq2)
directions = gsub(" ", "", directions)
print(directions)
translated = translate_directions(directions, seq1, seq2)
print(translated[[1]])
print(translated[[2]])
print(paste("Score:", score_matrix[m+1, n+1]))
}
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), " D"))
}
# Possible directions: diagonal, left, up
diag = (substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] + 3) ||
(substr(seq1, i-1, i-1) != substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] - 10)
left = score_matrix[i, j-1]-8 == current
up = score_matrix[i-1, j]-8 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
# fill out the matrix
for (i in 1:(m+1)) {
for (j in 1:(n+1)) {
if (i == 1) {
score_matrix[i,j] = gap_open * (j-1)
} else if (j == 1) {
score_matrix[i, j] = gap_open * (i-1)
} else {
match = score_matrix[i-1, j-1] + ifelse(substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1), match_score, mismatch_score)
gap_right = score_matrix[i, j-1] + gap_open
gap_down = score_matrix[i-1, j] + gap_open
score_matrix[i, j] = max(match, gap_right, gap_down)
}
}
}
global_align = function(seq1, seq2, match_score = 3, mismatch_score = -10, gap_open = -3) {
m = nchar(seq1)
n = nchar(seq2)
score_matrix = matrix(0, nrow = m+1, ncol = n+1)
# fill out the matrix
for (i in 1:(m+1)) {
for (j in 1:(n+1)) {
if (i == 1) {
score_matrix[i,j] = gap_open * (j-1)
} else if (j == 1) {
score_matrix[i, j] = gap_open * (i-1)
} else {
match = score_matrix[i-1, j-1] + ifelse(substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1), match_score, mismatch_score)
gap_right = score_matrix[i, j-1] + gap_open
gap_down = score_matrix[i-1, j] + gap_open
score_matrix[i, j] = max(match, gap_right, gap_down)
}
}
}
print(score_matrix)
# trace the matrix back
directions = traceback_matrix(score_matrix, m+1, n+1, seq1, seq2)
directions = gsub(" ", "", directions)
print(directions)
translated = translate_directions(directions, seq1, seq2)
print(translated[[1]])
print(translated[[2]])
print(paste("Score:", score_matrix[m+1, n+1]))
}
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2, match, mismatch, gap) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2, match, mismatch, gap), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2, match, mismatch, gap), " D"))
}
# Possible directions: diagonal, left, up
diag = (substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] + 3) ||
(substr(seq1, i-1, i-1) != substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] - 10)
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
print(paste(diag, left, up))
#
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2, match, mismatch, gap), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2, match, mismatch, gap), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2, match, mismatch, gap), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("UUUA","CUA")
global_align("UUUA","CUA", gap_open = -5)
global_align("UUUA","CUAUUA", gap_open = -5)
global_align("UUUA","CUAUUA")
global_align("UUUA","CUAUUA", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("AGCT","CGT", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("AGCT","CGT", match_score=3, mismatch_score=-10, gap_open=-8)
global_align("AGCT","CGT", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("GATTACA","GCATGCT", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("GATTACA","GCATGCAT", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("AATCAGGT","CGTTTAGAC", match_score=3, mismatch_score=-10, gap_open=-3)
global_align = function(seq1, seq2, match_score = 3, mismatch_score = -10, gap_open = -3) {
m = nchar(seq1)
n = nchar(seq2)
score_matrix = matrix(0, nrow = m+1, ncol = n+1)
# fill out the matrix
for (i in 1:(m+1)) {
for (j in 1:(n+1)) {
if (i == 1) {
score_matrix[i,j] = gap_open * (j-1)
} else if (j == 1) {
score_matrix[i, j] = gap_open * (i-1)
} else {
match = score_matrix[i-1, j-1] + ifelse(substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1), match_score, mismatch_score)
gap_right = score_matrix[i, j-1] + gap_open
gap_down = score_matrix[i-1, j] + gap_open
score_matrix[i, j] = max(match, gap_right, gap_down)
}
}
}
# trace the matrix back
directions = traceback_matrix(score_matrix, m+1, n+1, seq1, seq2)
directions = gsub(" ", "", directions)
translated = translate_directions(directions, seq1, seq2)
print(translated[[1]])
print(translated[[2]])
print(paste("Score:", score_matrix[m+1, n+1]))
}
# Recursively trace back the matrix and return a string of the directions to take
traceback_matrix = function(score_matrix, i, j, seq1, seq2, match, mismatch, gap) {
if (i==1 && j==1) {
return("")
}
current = score_matrix[i, j]
if (i == 1) {
# Only possible to come from the left
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2, match, mismatch, gap), " L"))
} else if (j == 1) {
# Only possible to come from above
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2, match, mismatch, gap), " D"))
}
# Possible directions: diagonal, left, up
diag = (substr(seq1, i-1, i-1) == substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] + 3) ||
(substr(seq1, i-1, i-1) != substr(seq2, j-1, j-1) && current == score_matrix[i-1, j-1] - 10)
left = score_matrix[i, j-1]-3 == current
up = score_matrix[i-1, j]-3 == current
if (diag) {
return(paste(traceback_matrix(score_matrix, i-1, j-1, seq1, seq2, match, mismatch, gap), "X"))
} else if (left) {
return(paste(traceback_matrix(score_matrix, i, j-1, seq1, seq2, match, mismatch, gap), "L"))
} else {
return(paste(traceback_matrix(score_matrix, i-1, j, seq1, seq2, match, mismatch, gap), "D"))
}
}
#translate directions to alignment
translate_directions = function(directions, seq1, seq2) {
seq1_aligned = ""
seq2_aligned = ""
i = 1
n = 1
directions = unlist(strsplit(directions, ""))
for (direction in directions) {
if (direction == "X") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
i = i + 1
n = n + 1
} else if (direction == "L") {
seq1_aligned = paste(seq1_aligned, "_", sep="")
seq2_aligned = paste(seq2_aligned, substr(seq2, n, n), sep="")
n = n + 1
} else if (direction == "D") {
seq1_aligned = paste(seq1_aligned, substr(seq1, i, i), sep="")
seq2_aligned = paste(seq2_aligned, "_", sep="")
i = i + 1
}
}
return(list(seq1_aligned, seq2_aligned))
}
global_align("AATCAGGT","CGTTTAGAC", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("TGCATC","CGTATC", match_score=3, mismatch_score=-10, gap_open=-3)
global_align("TGCATC","CGTATC", match_score=3, mismatch_score=-10, gap_open=-6)
global_align("TGCATC","CGTATC", match_score=3, mismatch_score=-10, gap_open=-5)
global_align("TGCATC","CGTATC", match_score=3, mismatch_score=-10, gap_open=-4)
global_align("TGCATC","CGTATC", match_score=3, mismatch_score=-10, gap_open=-3)
setwd("~/git/339n/class-notes")
renv::autoload()
renv::status()
renv::restore()
renv::install()
# biomaRt package
renv::install('BiocManager')
renv::install("BiocManager::biomaRt")
renv::install("Bioc::biomaRt")
renv::install('curl')
renv::install(libcurl4-openssl-dev)
renv::install('libcurl4-openssl-dev')
renv::install('curl')
BiocManager::install('biomaRt')
BiocManager::install('biomaRt')
library('biomaRt')
ensembl = useEnsembl(biomart = 'ensembl',
dataset = 'hsapiens_gene_ensembl')
genes = c("BRCA1", "TP53", "EGFR")
gene_info = getBM(
attributes = c("hgnc_symbol", "chromosome_name", "start_position", "end_position"),
filters = "hgnc_symbol",
values = genes,
mart = ensembl
)
print(gene_info)
